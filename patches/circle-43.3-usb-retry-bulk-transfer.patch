From 88240494fa02a09cbebd94a3ce35d87303cd0a0e Mon Sep 17 00:00:00 2001
From: Rene Stange <rsta2@o2online.de>
Date: Thu, 18 Mar 2021 13:12:06 +0100
Subject: [PATCH] usb/dwhcidevice: Retry bulk transfers on xact error

The access to some (especially USB 3.0) flash drives on RPi 3A+ and
Zero was not reliable before, because xact errors occurred from time
to time. Now transfers will be automatically retried several times,
if such an error occurs on a bulk endpoint.

Issue #211
---
 include/circle/usb/dwhcixferstagedata.h |  4 +++-
 lib/usb/dwhcidevice.cpp                 | 17 ++++++++++++++++-
 lib/usb/dwhcixferstagedata.cpp          | 25 +++++++++++++++++++++++--
 3 files changed, 42 insertions(+), 4 deletions(-)

diff --git a/include/circle/usb/dwhcixferstagedata.h b/include/circle/usb/dwhcixferstagedata.h
index 5300c74c..8890cdfb 100644
--- a/include/circle/usb/dwhcixferstagedata.h
+++ b/include/circle/usb/dwhcixferstagedata.h
@@ -2,7 +2,7 @@
 // dwhcixferstagedata.h
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2014-2020  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2014-2021  R. Stange <rsta2@o2online.de>
 // 
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -80,6 +80,7 @@ class CDWHCITransferStageData
 	boolean IsStageComplete (void) const;
 	u32 GetResultLen (void) const;
 	boolean IsTimeout (void) const;
+	boolean IsRetryOK (void) const;
 
 	CUSBRequest *GetURB (void) const;
 	CUSBDevice *GetDevice (void) const;
@@ -109,6 +110,7 @@ class CDWHCITransferStageData
 	unsigned	 m_nState;
 	unsigned	 m_nSubState;
 	u32		 m_nTransactionStatus;
+	unsigned	 m_nErrorCount;
 
 	u32		*m_pTempBuffer;
 	void		*m_pBufferPointer;
diff --git a/lib/usb/dwhcidevice.cpp b/lib/usb/dwhcidevice.cpp
index c59c5fab..79b22268 100644
--- a/lib/usb/dwhcidevice.cpp
+++ b/lib/usb/dwhcidevice.cpp
@@ -1064,7 +1064,22 @@ void CDWHCIDevice::ChannelInterruptHandler (unsigned nChannel)
 	{
 	case StageStateNoSplitTransfer:
 		nStatus = pStageData->GetTransactionStatus ();
-		if (nStatus & DWHCI_HOST_CHAN_INT_ERROR_MASK)
+		if (   (nStatus & DWHCI_HOST_CHAN_INT_XACT_ERROR)
+		    && pURB->GetEndpoint ()->GetType () == EndpointTypeBulk
+		    && pStageData->IsRetryOK ())
+		{
+#ifndef USE_USB_SOF_INTR
+			StartTransaction (pStageData);
+#else
+			m_pStageData[nChannel] = 0;
+			FreeChannel (nChannel);
+
+			QueueTransaction (pStageData);
+#endif
+
+			break;
+		}
+		else if (nStatus & DWHCI_HOST_CHAN_INT_ERROR_MASK)
 		{
 			CLogger::Get ()->Write (FromDWHCI, LogError,
 						"Transaction failed (status 0x%X)", nStatus);
diff --git a/lib/usb/dwhcixferstagedata.cpp b/lib/usb/dwhcixferstagedata.cpp
index 63cf64eb..32f3f356 100644
--- a/lib/usb/dwhcixferstagedata.cpp
+++ b/lib/usb/dwhcixferstagedata.cpp
@@ -2,7 +2,7 @@
 // dwhcixferstagedata.cpp
 //
 // Circle - A C++ bare metal environment for Raspberry Pi
-// Copyright (C) 2014-2020  R. Stange <rsta2@o2online.de>
+// Copyright (C) 2014-2021  R. Stange <rsta2@o2online.de>
 // 
 // This program is free software: you can redistribute it and/or modify
 // it under the terms of the GNU General Public License as published by
@@ -27,6 +27,8 @@
 #include <circle/timer.h>
 #include <assert.h>
 
+#define MAX_BULK_TRIES		8
+
 CDWHCITransferStageData::CDWHCITransferStageData (unsigned	 nChannel,
 						  CUSBRequest	*pURB,
 						  boolean	 bIn,
@@ -42,6 +44,7 @@ CDWHCITransferStageData::CDWHCITransferStageData (unsigned	 nChannel,
 	m_nState (0),
 	m_nSubState (0),
 	m_nTransactionStatus (0),
+	m_nErrorCount (0),
 	m_pTempBuffer (0),
 	m_nStartTicksHZ (0),
 	m_pFrameScheduler (0)
@@ -186,9 +189,17 @@ void CDWHCITransferStageData::TransactionComplete (u32 nStatus, u32 nPacketsLeft
 			assert (m_bIn);
 
 			m_nPackets = 0;		// no data is available, complete transfer
+
+			return;
 		}
 
-		return;
+		// bulk transfers with xact error will be retried, return otherwise
+		if (   !(nStatus & DWHCI_HOST_CHAN_INT_XACT_ERROR)
+		    || m_pEndpoint->GetType () != EndpointTypeBulk
+		    || ++m_nErrorCount > MAX_BULK_TRIES)
+		{
+			return;
+		}
 	}
 
 	u32 nPacketsTransfered = m_nPacketsPerTransaction - nPacketsLeft;
@@ -214,6 +225,11 @@ void CDWHCITransferStageData::TransactionComplete (u32 nStatus, u32 nPacketsLeft
 	assert (nPacketsTransfered <= m_nPackets);
 	m_nPackets -= nPacketsTransfered;
 
+	if (!m_bSplitTransaction)
+	{
+		m_nPacketsPerTransaction = m_nPackets;
+	}
+
 	// if (m_nTotalBytesTransfered > m_nTransferSize) this will be false:
 	if (m_nTransferSize - m_nTotalBytesTransfered < m_nBytesPerTransaction)
 	{
@@ -490,6 +506,11 @@ boolean CDWHCITransferStageData::IsTimeout (void) const
 	return CTimer::Get ()->GetTicks ()-m_nStartTicksHZ >= m_nTimeoutHZ ? TRUE : FALSE;
 }
 
+boolean CDWHCITransferStageData::IsRetryOK (void) const
+{
+	return m_nErrorCount <= MAX_BULK_TRIES;
+}
+
 CUSBRequest *CDWHCITransferStageData::GetURB (void) const
 {
 	assert (m_pURB != 0);
